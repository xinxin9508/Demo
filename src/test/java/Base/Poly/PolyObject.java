package Base.Poly;

/**
 * 1.多态：
 *       一个对象的编译类型和运行类型可以不一致
 *       编译类型在定义对象时，就确定了，不能改变
 *       运行类型可以改变
 *       编译类型看定义时 = 号的左边，运行类型看 = 号的右边
 *   向上转型：父类的引用指向子类的对象
 *            父类对象类型 变量名 = new 子类类型()
 *            可以调用父类的所有成员（遵守访问权限）
 *            不能调用子类的特有成员
 *            最终运行看子类的具体实现，如果子类有该方法则直接调用，如果没有则找父类的
 *    向下转型：子类类型 引用名 = (子类类型) 父类引用
 *             只能强转父类的引用，不能强转父类的对象
 *             要求父类的引用必须指向的事当前目标类型的对象
 *             当向下转型后，可以调用子类类型中所有的成员
 *    属性不存在重写，属性的值看编译类型
 *    instanceOF 比较是否为该对象的运行类型为另一个对象的运行类型或子类
 */
public class PolyObject {
    public static void main(String[] args) {
        Master tom = new Master("Tom");
        tom.feed(new Dog("小黑"), new Meet("rou"));

        tom.feed(new Cat("小花"),new Fish("鱼"));
    }
}
